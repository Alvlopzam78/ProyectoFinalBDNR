* PROYECTO FINAL BDNR 
** Integrantes:
    - Álvaro López Zamora: 198442
    - Emiliano Bobadilla Franco: 198554
    - Aldahir López Navarrete: 198069

** Objetivo:
Buscar una API para conectarla a través de python con una base de datos ~MongoDB~ y después hacer un ETL que cargue la base de datos procesada a un base de datos estilo grafo en ~Neo4j~.

Para esto, se escogió utilizar la API de Harry Potter ([[https://hp-api.onrender.com][HP-API]]) que contiene a todos los personajes del universo de Harry Potter e información correspondiente a su casa, su asendencia, su patronous, entre otros.

** MongoDB
Lo primero, es iniciar Mongo a través de Docker para poder almacenar los datos que se extraigan.

#+begin_src shell
docker stop mongo
docker rm mongo
docker run -p 27017:27017 \
       -v mongo-data:/data/db \
       --name mongo \
       -d mongo
#+end_src

Si no es la primera vez que se inicializa Mongo, entonces es suficiente con escribir en la terminal

#+begin_src shell
docker start mongo
#+end_src

Una vez que Mongo se ha inicializado, se utilizó python para poder extraer los datos desde la API y agregarlos a Mongo. Para esto se utiliza el siguiente código.

#+begin_src python
import requests
from pymongo import MongoClient
import json

client = MongoClient("mongodb://localhost:27017/")
db = client["HP"]
col = db["characters"]
string = "https://hp-api.onrender.com/api/characters"
response = requests.get(string)

for x in json.loads(response.text):
    col.insert_one(x)
#+end_src

*** Queries Mongo
¿Cuántos estudiantes y staff hay por casa?
#+begin_src javascript
db.characters.aggregate([
  {$group: {
    _id: "$house",
    studentCount: {$sum: {$cond: [{ $eq: ["$hogwartsStudent", true] }, 1, 0]}},
    staffCount: {$sum: {$cond: [{ $eq: ["$hogwartsStaff", true] }, 1, 0]}}
    }}
])
#+end_src

¿Cuáles son los 3 "ancestry" más comúnes?
#+begin_src javascript
db.characters.aggregate([
  {$match: {ancestry: { $ne: "" }}},
  {$group: {_id: "$ancestry",count: { $sum: 1 }}},
  {$sort: {count: -1}},
  {$limit: 3},
  {$project: {ancestry: "$_id",count: 1,_id: 0}}
])
#+end_src

¿Cuál es el material más común con el que se construyen las varitas, así como el tamaño promedio, por casa?
#+begin_src javascript
db.characters.aggregate([
  {$match: {house: { $ne: "" }}},
  {$group: {_id: "$house",wood: { $push: "$wand.wood" },averageLength: { $avg: "$wand.length" }}},
  {$project: {house: "$_id",mostCommonWood: { $arrayElemAt: [ { $split: [ { $reduce: { input: "$wood", initialValue: "", in: { $concat: [ "$$value", { $cond: [ { $eq: [ "$$value", "" ] }, "", "," ] }, "$$this" ] } } }, "," ] }, 0 ] },averageLength: 1,_id: 0}}
])
#+end_src
** Neo4j

Primero creamos una nueva instancia de un EC2 usando Amazon Web services.

![ec2](https://github.com/Alvlopzam78/ProyectoFinalBDNR/blob/main/imagenes/ec2.png)

*** Instalación Neo4j

Ejecutamos los siguientes comandos en la terminal:

Primero garantizamos las llaves para el intercambio

#+begin_src shell
curl -fsSL https://debian.neo4j.com/neotechnology.gpg.key |sudo gpg --dearmor -o /usr/share/keyrings/neo4j.gpg
#+end_src

#+RESULTS:

Luego agregamos los repositorios de neo4j a nuestro ubuntu

#+begin_src shell
  echo "deb [signed-by=/usr/share/keyrings/neo4j.gpg] https://debian.neo4j.com stable 4.1" | sudo tee -a /etc/apt/sources.list.d/neo4j.list
#+end_src

Actualizamos la lista de paquetes que ve el sistema

#+begin_src shell
sudo apt update
#+end_src

Finalmente, podemos instalar Neo4j:

#+begin_src shell
  sudo apt install neo4j
#+end_src

Si queremos que cuando reiniciemos la máquina, nuestro neo4j viva, hacemos esto:

#+begin_src shell
sudo systemctl enable neo4j.service
#+end_src

E iniciamos el servicio.
#+begin_src shell
sudo systemctl start neo4j.service
#+end_src

*** Conexión a Neo4j

Antes de conectarnos debemos modificar el archivo ~/etc/neo4j/neo4j.conf~ para que Neo4j acepte conexiones de todo el mundo 🌐:

#+begin_src shell
  sudo nano /etc/neo4j/neo4j.conf
#+end_src
Hay que buscar la siguiente línea y descomentarla (quitarle el ~*~):

#+begin_src shell
*dbms.default_listen_address=0.0.0.0
#+end_src

Y reiniciar el server
#+begin_src shell
  sudo systemctl restart neo4j
#+end_src

*** Carga de datos a Neo4j 

#+begin_src python
import pymongo
from py2neo import Graph, Node, Relationship

# Conexión a MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["HP"]  # Reemplaza con el nombre de tu base de datos
collection = db["characters"]  # Reemplaza con el nombre de tu colección

# Conexión a Neo4j
graph = Graph("bolt://13.57.206.177:7687", auth=("neo4j", "contraseña"))  # Reemplaza con tus credenciales y dirección IP

# Extraer los datos de MongoDB
data = list(collection.find())

# Generar nodos y relaciones
nodes = []
houses = {}
wand_cores = {}
ancestries = {}
relationships = []

# Crear nodos y preparar relaciones
print("Creando nodos y preparando relaciones...")
for item in data:
    node = Node("Character",
                id=item['id'],
                name=item['name'],
                species=item['species'],
                gender=item['gender'],
                house=item['house'],
                dateOfBirth=item['dateOfBirth'],
                yearOfBirth=item['yearOfBirth'],
                wizard=item['wizard'],
                ancestry=item['ancestry'],
                eyeColour=item['eyeColour'],
                hairColour=item['hairColour'],
                wand_wood=item['wand']['wood'],
                wand_core=item['wand']['core'],
                wand_length=item['wand']['length'],
                patronus=item['patronus'],
                hogwartsStudent=item['hogwartsStudent'],
                hogwartsStaff=item['hogwartsStaff'],
                actor=item['actor'],
                alive=item['alive'],
                image=item['image'])
    nodes.append(node)

    # Crear o obtener nodos de casa
    if item['house'] not in houses:
        houses[item['house']] = Node('House', name=item['house'])

    # Crear o obtener nodos de wand_core
    if item['wand']['core'] not in wand_cores:
        wand_cores[item['wand']['core']] = Node('Wand_Core', name=item['wand']['core'])

    # Crear o obtener nodos de ancestry
    if item['ancestry'] not in ancestries:
        ancestries[item['ancestry']] = Node('Ancestry', name=item['ancestry'])

    # Preparar relaciones
    relationships.append(Relationship(node, 'BELONGS_TO', houses[item['house']]))
    relationships.append(Relationship(node, 'HAS_WAND_CORE', wand_cores[item['wand']['core']]))
    relationships.append(Relationship(node, 'HAS_ANCESTRY', ancestries[item['ancestry']]))

# Crear nodos y relaciones en la base de datos en lotes
print("Iniciando transacciones en lotes...")
batch_size = 1000  # Define your batch size here
num_of_nodes = len(nodes)
num_of_relationships = len(relationships)

for i in range(0, num_of_nodes, batch_size):
    tx = graph.begin()
    for node in nodes[i : i+batch_size]:
        tx.create(node)
    tx.commit()
    print(f"Creados nodos {i+batch_size} de {num_of_nodes}")

for i in range(0, num_of_relationships, batch_size):
    tx = graph.begin()
    for relationship in relationships[i : i+batch_size]:
        tx.create(relationship)
    tx.commit()
    print(f"Creadas relaciones {i+batch_size} de {num_of_relationships}")

print("¡Todas las transacciones se han completado exitosamente!")

#+end_src

*** Queries Neo4j
Obtener la información de un personaje especifico (Harry Potter) y todas sus relaciones
#+begin_src cypher
MATCH (character:Character {name: 'Harry Potter'})-[:BELONGS_TO]->(house:House),
      (character)-[:HAS_WAND_CORE]->(wandCore:Wand_Core),
      (character)-[:HAS_ANCESTRY]->(ancestry:Ancestry)
RETURN character, house, wandCore, ancestry
#+end_src
Cuenta por cada casa, cuántos personajes se encuentran vivos
#+begin_src cypher
MATCH (character:Character)-[:BELONGS_TO]->(house:House)
WHERE character.alive = true
RETURN house.name AS House, COUNT(character) AS LivingCharacters
#+end_src
Obtener aquellos personajes cuyo patronous sea un ciervo y su casa sea Gryffindor
#+begin_src cypher
MATCH (character:Character)-[:BELONGS_TO]->(house:House)
WHERE house.name = 'Gryffindor' AND character.patronus = 'stag'
RETURN character
#+end_src
